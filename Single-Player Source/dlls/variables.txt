The more coding you do, the more you'll start talking about the 'pev'. The pev is a pointer to an entvars_t structure. More importantly, the pev is what ties the class you write to the engine. Any value you set here is likely to be fiddled with by the engine when you next look at it. You can see the declaration for entvars_t in engine\progdefs.h.

Below are some of the variables that are a) important and b) I know a bit about.
pev->origin

This is a vector pointing to the location of the entity in world coordinates.
pev->velocity

This is a vector that gives both direction and the speed of your entity. You can get the speed by doing pev->velocity.Length(). Getting the direction in terms of angles is a little more complex and may be covered later.

Setting the velocity is a painful thing. The reason for this is that Half-Life is also messing with this variable as part of its physics engine. This means that it fiddles with it to provide friction and gravity. The only way we've found to give something the constant velocity you want is to keep setting velocity every chance you get. This involves getting your think functions called 10 or even 100 times a second.
pev->angles

This is the direction your model is facing, represented in degrees (x,y,z). Setting this is also confusing. Sometimes the model seems to go straight to the angle you set, other times it smoothly rotates there. Can anyone shed any light on this?
pev->avelocity

Thanks to Joe Miller for this info on avelocity.

In Quake I/II avelocity is used to define how fast and which way an entity should rotate. This mostly used for health boxes, grenades and so on.

DP: I expect that it only works for certain movetypes. Can anyone clarify this?
pev->punchangle

This probably only affects the player. Weapons use this to simulate 'kick'.
pev->idealpitch, pev->pitch_speed, pev->ideal_yaw, pev->yaw_speed

These variables set the ideal pitch/yaw and the speed that the entity should move at to get to that pitch/yaw. The engine functions oldCHANGE_YAW and CHANGE_PITCH need to be called 10 times a second to have these variables work correctly.

Thanks to The Lone Coder for sending in some info on this, and kicking me into updating the page (after Adam begged for a while).
pev->modelindex

This is the index to the model. The index is returned by PRECACHE. However, SET_MODEL does the job much better. Snarks and some others use this to determine what they're looking at -- they basically won't attack anything that has the same model index as themselves.

This picture shows you a bug that happened when we worked far too late into the night on our code. We were writing a Barney like entity (using the Barney model). All you should see on the screen are Barneys. Our Barneys were supposed to be checking the modelindex of what they were about to attack to make sure that they didn't attack other Barneys. For some reason, though, the Barneys kept turning into whatever the player looked like. The reason? We had a line of code like this:

     if(pev->modelindex = pOther->pev->modelindex)
     {
      ....
  

I think that says it all about coding late at night... /
pev->nextthink

This determines when the 'think' function will next get called. This is represented in 'global time'. For this reason it should always be set like this:

  pev->nextthink = gpGlobals->time + n;
  

where n is how many seconds you want before the next think.
pev->movetype

This is used to tell the physics engine how to move your entity around. You can have:

      MOVETYPE_NONE
          Never Moves
      MOVETYPE_WALK
          (Player only)
      MOVETYPE_STEP
          Gravity, special edge handling, monsters use this
      MOVETYPE_FLY
          No gravity, but still collides with stuff.
      MOVETYPE_TOSS
          gravity/collisions
      MOVETYPE_PUSH
          no clip to world, push and crush
      MOVETYPE_NOCLIP
          no gravity, no collisions, still do velocity/avelocity.
      MOVETYPE_FLYMISSILE
          extra size to monsters
      MOVETYPE_BOUNCE
          Just like toss, but reflect velocity when contacting surfaces.
      MOVETYPE_BOUNCEMISSILE
          Bounce without gravity
      MOVETYPE_FOLLOW
          track movement of aiment
      MOVETYPE_PUSHSTEP
          BSP model that needs physics/world collisions (uses nearest hull for world collisions.) 

I'm not going to pretend I know all the nuances of these. If anyone can add to this then please tell me.
pev->sequence

This is which sequence should be playing. See the Activities and Sequences page.
pev->view_ofs

You should set this to the eye position of your model (if applicable.) It is used by the Snarks and others to determine where to attack. It is also useful when you try and find out what your entity can see.