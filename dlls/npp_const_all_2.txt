Ham_DOD_GetState
Ham_DOD_GetStateEnt
Ham_DOD_Item_CanDrop
Ham_DOD_RoundRespawn
Ham_DOD_RoundRespawnEnt
Ham_DOD_RoundStore
Ham_EarPosition
HAM_ERR_END
Ham_ESF_IsEnvModel
Ham_ESF_TakeDamage2
Ham_EyePosition
Ham_FBecomeProne
HAM_FUNC_NOT_CONFIGURED
Ham_FVecVisible
Ham_FVisible
Ham_GetDelay
Ham_GetNextTarget
Ham_GetToggleState
Ham_GiveAmmo
HAM_HANDLED
Ham_HasTarget
HAM_IGNORED
Ham_Illumination
HAM_INVALID_FUNC
Ham_IsAlive
Ham_IsBSPModel
Ham_IsInWorld
Ham_IsMoving
Ham_IsNetClient
Ham_IsPlayer
Ham_IsSneaking
Ham_IsTriggered
Ham_Item_AddDuplicate
Ham_Item_AddToPlayer
Ham_Item_AttachToPlayer
Ham_Item_CanDeploy
Ham_Item_CanHolster
Ham_Item_Deploy
Ham_Item_Drop
Ham_Item_GetWeaponPtr
Ham_Item_Holster
Ham_Item_ItemSlot
Ham_Item_Kill
Ham_Item_PostFrame
Ham_Item_PreFrame
Ham_Item_PrimaryAmmoIndex
Ham_Item_SecondaryAmmoIndex
Ham_Item_UpdateClientData
Ham_Item_UpdateItemInfo
Ham_Keyvalue
Ham_Killed
HAM_LAST_ENTRY_DONT_USE_ME_LOL
Ham_MyMonsterPointer
Ham_MySquadMonsterPointer
Ham_NS_AwardKill
Ham_NS_GetPointValue
Ham_NS_ResetEntity
Ham_NS_UpdateOnRemove
Ham_ObjectCaps
HAM_OK
Ham_OnControls
HAM_OVERRIDE
Ham_OverrideReset
Ham_Player_Duck
Ham_Player_GetGunPosition
Ham_Player_ImpulseCommands
Ham_Player_Jump
Ham_Player_PostThink
Ham_Player_PreThink
Ham_Player_ShouldFadeOnDeath
Ham_Player_UpdateClientData
Ham_Precache
Ham_ReflectGauss
Ham_RemovePlayerItem
Ham_Respawn
Ham_SetObjectCollisionBox
Ham_SetToggleState
Ham_Spawn
Ham_StartSneaking
Ham_StopSneaking
HAM_SUPERCEDE
Ham_TakeDamage
Ham_TakeHealth
Ham_TeamId
Ham_TFC_CalcEmpDmgRad
Ham_TFC_Concuss
Ham_TFC_EmpExplode
Ham_TFC_EmpRemove
Ham_TFC_EngineerUse
Ham_TFC_Finished
Ham_TFC_TakeConcussionBlast
Ham_TFC_TakeEmpBlast
Ham_Think
Ham_Touch
Ham_TraceAttack
Ham_TraceBleed
Ham_TS_BreakableRespawn
Ham_TS_CanUsedThroughWalls
Ham_TS_EnableObjective
Ham_TS_GiveSlowMul
Ham_TS_GoSlow
Ham_TS_InSlow
Ham_TS_IsObjective
Ham_TS_OnFreeEntPrivateData
Ham_TS_RespawnWait
Ham_TS_ShouldCollide
Ham_UpdateOwner
Ham_Use
Ham_Weapon_AddWeapon
Ham_Weapon_ExtractAmmo
Ham_Weapon_ExtractClipAmmo
Ham_Weapon_IsUsable
Ham_Weapon_PlayEmptySound
Ham_Weapon_PrimaryAttack
Ham_Weapon_Reload
Ham_Weapon_ResetEmptySound
Ham_Weapon_RetireWeapon
Ham_Weapon_SecondaryAttack
Ham_Weapon_SendWeaponAnim
Ham_Weapon_ShouldWeaponIdle
Ham_Weapon_UseDecrement
Ham_Weapon_WeaponIdle
HIT_CHEST
HIT_GENERIC
HIT_HEAD
HIT_LEFTARM
HIT_LEFTLEG
HIT_RIGHTARM
HIT_RIGHTLEG
HIT_STOMACH
HIVETRAIT_DC
HIVETRAIT_MC
HIVETRAIT_NONE
HIVETRAIT_SC
HIW_AK47
HIW_AKS74U
HIW_BERETTA
HIW_FLASHBANG
HIW_GLOCK
HIW_M11
HIW_M11SD
HIW_M16A2
HIW_M4A1
HIW_MP5A4
HIW_MP5SD5
HIW_NATOGREN
HIW_PSG1
HIW_REMINGTON
HIW_SPAS12
HIW_TANGOGREN
HIW_ZASTAVA
HLI_ANTIDOTE
HLI_BATTERY
HLI_HEALTHKIT
HLI_SECURITY
HLW_ALLWEAPONS
HLW_CHAINGUN
HLW_CROSSBOW
HLW_CROWBAR
HLW_EGON
HLW_GAUSS
HLW_GLOCK
HLW_HANDGRENADE
HLW_HORNETGUN
HLW_MP5
HLW_NONE
HLW_PYTHON
HLW_RPG
HLW_SATCHEL
HLW_SHOTGUN
HLW_SNARK
HLW_SUIT
HLW_TRIPMINE
HULL_HEAD
HULL_HUMAN
HULL_LARGE
HULL_POINT
IGNORE_GLASS
IGNORE_MISSILE
IGNORE_MONSTERS
INVALID_HANDLE
INVALID_PLUGIN_ID
IN_ALT1
IN_ATTACK
IN_ATTACK2
IN_BACK
IN_CANCEL
IN_DUCK
IN_FORWARD
IN_JUMP
IN_LEFT
IN_MOVELEFT
IN_MOVERIGHT
IN_RELOAD
IN_RIGHT
IN_RUN
IN_SCORE
IN_USE
ITEM_DISABLED
ITEM_ENABLED
ITEM_IGNORE
kRenderFxClampMinScale
kRenderFxDeadPlayer
kRenderFxDistort
kRenderFxExplode
kRenderFxFadeFast
kRenderFxFadeSlow
kRenderFxFlickerFast
kRenderFxFlickerSlow
kRenderFxGlowShell
kRenderFxHologram
kRenderFxNoDissipation
kRenderFxNone
kRenderFxPulseFast 
kRenderFxPulseFastWide
kRenderFxPulseSlow
kRenderFxPulseSlowWide
kRenderFxSolidFast
kRenderFxSolidSlow
kRenderFxStrobeFast
kRenderFxStrobeFaster
kRenderFxStrobeSlow
kRenderGlow
kRenderNormal
kRenderTransAdd
kRenderTransAlpha
kRenderTransColor
kRenderTransTexture
KV_ClassName
KV_fHandled
KV_KeyName
KV_Value
LANG_PLAYER
LANG_SERVER
LibType_Class
LibType_Library
MASK_ADRENALINE
MASK_ALIEN_EMBRYO
MASK_ALIEN_MOVEMENT
MASK_ARMOR1
MASK_ARMOR2
MASK_ARMOR3
MASK_BASEBUILD0
MASK_BASEBUILD1
MASK_BASEBUILD2
MASK_BASEBUILD3
MASK_BASEBUILD4
MASK_BASEBUILD5
MASK_BASEBUILD6
MASK_BASEBUILD7
MASK_BUILDABLE
MASK_CARAPACE
MASK_CELERITY
MASK_CLOAKING
MASK_DEFENSE2
MASK_DEFENSE3
MASK_DETECTED
MASK_DIGESTING
MASK_ELECTRICITY
MASK_ENSNARED
MASK_FOCUS
MASK_HEAVYARMOR
MASK_JETPACK
MASK_MOTION
MASK_MOVEMENT2
MASK_MOVEMENT3
MASK_NONE
MASK_PARASITED
MASK_PLAYER_STUNNED
MASK_PRIMALSCREAM
MASK_RECYCLING
MASK_REDEMPTION
MASK_REGENERATION
MASK_SCENTOFFEAR
MASK_SELECTABLE
MASK_SENSORY2
MASK_SENSORY3
MASK_SENSORY_NEARBY
MASK_SIGHTED
MASK_SILENCE
MASK_TOPDOWN
MASK_UMBRA
MASK_WALLSTICKING
MASK_WEAPONS1
MASK_WEAPONS2
MASK_WEAPONS3
MAX_DIRECTOR_CMD_PARAMETERS
MAX_DIRECTOR_CMD_STRING
MENUPAD_NONE
MENUPAD_PAGE
MENU_BACK
MENU_EXIT
MENU_KEY_0
MENU_KEY_1
MENU_KEY_2
MENU_KEY_3
MENU_KEY_4
MENU_KEY_5
MENU_KEY_6
MENU_KEY_7
MENU_KEY_8
MENU_KEY_9
MENU_MORE
MetaFunc_CallGameEntity
MEXIT_ALL
MEXIT_NEVER
MEXIT_NORMAL
MI_ALLIES_PARAS
MI_ALLIES_TEAM
MI_AXIS_PARAS
module_badload
module_loaded
module_noattach
module_noinfo
module_none
module_noquery
module_old
module_query
MOVETYPE_BOUNCE
MOVETYPE_BOUNCEMISSILE
MOVETYPE_FLY
MOVETYPE_FLYMISSILE
MOVETYPE_FOLLOW
MOVETYPE_NOCLIP
MOVETYPE_NONE
MOVETYPE_PUSH
MOVETYPE_PUSHSTEP
MOVETYPE_STEP
MOVETYPE_TOSS
MOVETYPE_WALK
MPROP_BACKNAME
MPROP_EXIT
MPROP_EXITNAME
MPROP_NEXTNAME
MPROP_NOCOLORS
MPROP_NUMBER_COLOR
MPROP_ORDER
MPROP_PADMENU
MPROP_PERPAGE
MPROP_TITLE
MSG_ALL
MSG_BROADCAST
MSG_INIT
MSG_ONE
MSG_ONE_UNRELIABLE
MSG_PAS
MSG_PAS_R
MSG_PVS
MSG_PVS_R
MSG_SPEC
M_PI
NSGame_AlienVAlien
NSGame_CantTell
NSGame_MarineVAlien
NSGame_MarineVMarine
NSGame_Unknown
NSPS_FL_COLLIDE
NSPS_FL_CONSTRAIN_PITCH
NSPS_FL_FACE_UP
NSPS_FL_FADE_IN
NSPS_FL_FADE_OUT
NSPS_FL_HI_DETAIL
NSPS_FL_PARTICLE_DENSITY
NSPS_FL_START_ON
NSPS_FL_USE_GRAVITY
NSPS_FL_USE_TRI
NSPS_GS_BLOB
NSPS_GS_BOX
NSPS_GS_CONE
NSPS_GS_CYLINDER
NSPS_GS_DISC
NSPS_GS_LINE
NSPS_GS_NONE
NSPS_GS_PLANE
NSPS_GS_POINT
NSPS_GS_RECTANGLE
NSPS_GS_TRIANGLE
NSPS_R_ADDITIVE
NSPS_R_GLOW
NSPS_R_NORMAL
NSPS_R_TRANSALPHA
NSPS_R_TRANSCOLOR
NSPS_R_TRANSTEXTURE
NSPS_VS_BLOB
NSPS_VS_BOX
NSPS_VS_POINT
NSPS_VS_SPHERE
NS_CONST_INC
pev_absmax
pev_absmin
pev_absolute_end
pev_aiment
pev_air_finished
pev_angles
pev_animtime
pev_armortype
pev_armorvalue
pev_avelocity
pev_basevelocity
pev_bInDuck
pev_blending
pev_blending_0
pev_blending_1
pev_body
pev_button
pev_bytearray_end
pev_bytearray_start
pev_byte_end
pev_byte_start
pev_chain
pev_classname
pev_clbasevelocity
pev_colormap
pev_controller
pev_controller_0
pev_controller_1
pev_controller_2
pev_controller_3
pev_deadflag
pev_dmg
pev_dmgtime
pev_dmg_inflictor
pev_dmg_save
pev_dmg_take
pev_edict2_start
pev_edict_end
pev_edict_start
pev_effects
pev_endpos
pev_enemy
pev_euser1
pev_euser2
pev_euser3
pev_euser4
pev_fixangle
pev_flags
pev_flDuckTime
pev_flFallVelocity
pev_float_end
pev_float_start
pev_flSwimTime
pev_flTimeStepSound
pev_fov
pev_frags
pev_frame
pev_framerate
pev_friction
pev_fuser1
pev_fuser2
pev_fuser3
pev_fuser4
pev_gaitsequence
pev_gamestate
pev_globalname
pev_gravity
pev_groundentity
pev_groupinfo
pev_health
pev_idealpitch
pev_ideal_yaw
pev_impacttime
pev_impulse
pev_int_end
pev_int_start
pev_iStepLeft
pev_iuser1
pev_iuser2
pev_iuser3
pev_iuser4
pev_light_level
pev_ltime
pev_maxs
pev_maxspeed
pev_max_health
pev_message
pev_mins
pev_model
pev_modelindex
pev_movedir
pev_movetype
pev_netname
pev_nextthink
pev_noise
pev_noise1
pev_noise2
pev_noise3
pev_oldbuttons
pev_oldorigin
pev_origin
pev_owner
pev_pain_finished
pev_pContainingEntity
pev_pitch_speed
pev_playerclass
pev_punchangle
pev_pushmsec
pev_radsuit_finished
pev_renderamt
pev_rendercolor
pev_renderfx
pev_rendermode
pev_scale
pev_sequence
pev_size
pev_skin
pev_solid
pev_spawnflags
pev_speed
pev_startpos
pev_starttime
pev_string2_begin
pev_string2_end
pev_string_end
pev_string_start
pev_takedamage
pev_target
pev_targetname
pev_team
pev_teleport_time
pev_vecarray_end
pev_vecarray_start
pev_velocity
pev_viewmodel
pev_viewmodel2
pev_view_ofs
pev_vuser1
pev_vuser2
pev_vuser3
pev_vuser4
pev_v_angle
pev_waterlevel
pev_watertype
pev_weaponanim
pev_weaponmodel
pev_weaponmodel2
pev_weapons
pev_yaw_speed
PITCH_HIGH
PITCH_LOW
PITCH_NORM
PLUGIN_CONTINUE
PLUGIN_HANDLED
PLUGIN_HANDLED_MAIN
print_center
print_chat
print_console
print_notify
PS_DEPLOY
PS_NOPRONE
PS_PRONE
PS_PRONEDEPLOY
radian
Recovery_Kicked
Recovery_Lying
Recovery_Thrown
Recovery_Tumbled
REGEX_MATCH_FAIL
REGEX_NO_MATCH
REGEX_OK
REGEX_PATTERN_FAIL
SEEK_CUR
SEEK_END
SEEK_SET
SF_AUTO_FIREONCE
SF_BEAM_DECALS
SF_BEAM_RANDOM
SF_BEAM_RING
SF_BEAM_SHADEIN
SF_BEAM_SHADEOUT
SF_BEAM_SPARKEND
SF_BEAM_SPARKSTART
SF_BEAM_STARTON
SF_BEAM_TEMPORARY
SF_BEAM_TOGGLE
SF_BLOOD_DECAL
SF_BLOOD_PLAYER
SF_BLOOD_RANDOM
SF_BLOOD_STREAM
SF_BREAK_CROWBAR
SF_BREAK_PRESSURE
SF_BREAK_TOUCH
SF_BREAK_TRIGGER_ONLY
SF_BRUSH_ROTATE_BACKWARDS
SF_BRUSH_ROTATE_INSTANT
SF_BRUSH_ROTATE_LARGERADIUS
SF_BRUSH_ROTATE_MEDIUMRADIUS
SF_BRUSH_ROTATE_SMALLRADIUS
SF_BRUSH_ROTATE_X_AXIS
SF_BRUSH_ROTATE_Y_AXIS
SF_BRUSH_ROTATE_Z_AXIS
SF_BTARGET_ON
SF_BTARGET_USE
SF_BUBBLES_STARTOFF
SF_BUTTON_DONTMOVE
SF_BUTTON_SPARK_IF_OFF
SF_BUTTON_TOGGLE
SF_BUTTON_TOUCH_ONLY
SF_CAMERA_PLAYER_POSITION
SF_CAMERA_PLAYER_TAKECONTROL
SF_CAMERA_PLAYER_TARGET
SF_CHANGELEVEL_USEONLY
SF_CONVEYOR_NOTSOLID
SF_CONVEYOR_VISUAL
SF_CORNER_FIREONCE
SF_CORNER_TELEPORT
SF_CORNER_WAITFORTRIG
SF_DECAL_NOTINDEATHMATCH
SF_DETONATE
SF_DOOR_NOMONSTERS
SF_DOOR_NO_AUTO_RETURN
SF_DOOR_ONEWAY
SF_DOOR_PASSABLE
SF_DOOR_ROTATE_BACKWARDS
SF_DOOR_ROTATE_X
SF_DOOR_ROTATE_Y
SF_DOOR_ROTATE_Z
SF_DOOR_SILENT
SF_DOOR_START_OPEN
SF_DOOR_USE_ONLY
SF_ENDSECTION_USEONLY
SF_ENVEXPLOSION_NODAMAGE
SF_ENVEXPLOSION_NODECAL
SF_ENVEXPLOSION_NOFIREBALL
SF_ENVEXPLOSION_NOSMOKE
SF_ENVEXPLOSION_NOSPARKS
SF_ENVEXPLOSION_REPEATABLE
SF_ENVTEXT_ALLPLAYERS
SF_FADE_IN
SF_FADE_MODULATE
SF_FADE_ONLYONE
SF_FUNNEL_REVERSE
SF_GAMECOUNT_FIREONCE
SF_GAMECOUNT_RESET
SF_GIBSHOOTER_REPEATABLE
SF_GLOBAL_SET
SF_LIGHT_START_OFF
SF_MESSAGE_ALL
SF_MESSAGE_ONCE
SF_MOMENTARY_DOOR
SF_MONSTER_FADECORPSE
SF_MONSTER_FALL_TO_GROUND
SF_MONSTER_GAG
SF_MONSTER_HITMONSTERCLIP
SF_MONSTER_PREDISASTER
SF_MONSTER_PRISONER
SF_MONSTER_TURRET_AUTOACTIVATE
SF_MONSTER_TURRET_STARTINACTIVE
SF_MONSTER_WAIT_FOR_SCRIPT
SF_MONSTER_WAIT_TILL_SEEN
SF_MONSTER_WAIT_UNTIL_PROVOKED
SF_MULTIMAN_CLONE
SF_MULTIMAN_THREAD
SF_MULTI_INIT
SF_NORESPAWN
SF_PATH_ALTERNATE
SF_PATH_ALTREVERSE
SF_PATH_DISABLED
SF_PATH_DISABLE_TRAIN
SF_PATH_FIREONCE
SF_PENDULUM_AUTO_RETURN
SF_PENDULUM_PASSABLE
SF_PKILL_FIREONCE
SF_PLAT_TOGGLE
SF_PLAYEREQUIP_USEONLY
SF_PTEAM_FIREONCE
SF_PTEAM_GIB
SF_PTEAM_KILL
SF_PUSH_BREAKABLE
SF_RELAY_FIREONCE
SF_RENDER_MASKAMT
SF_RENDER_MASKCOLOR
SF_RENDER_MASKFX
SF_RENDER_MASKMODE
SF_ROTBUTTON_NOTSOLID
SF_SCORE_NEGATIVE
SF_SCORE_TEAM
SF_SHAKE_DISRUPT
SF_SHAKE_EVERYONE
SF_SHAKE_INAIR
SF_SPRITE_ONCE
SF_SPRITE_STARTON
SF_SPRITE_TEMPORARY
SF_SUIT_SHORTLOGON
SF_TANK_ACTIVE
SF_TANK_ALIENS
SF_TANK_CANCONTROL
SF_TANK_HUMANS
SF_TANK_LINEOFSIGHT
SF_TANK_PLAYER
SF_TANK_SOUNDON
SF_TEAMMASTER_ANYTEAM
SF_TEAMMASTER_FIREONCE
SF_TEAMSET_CLEARTEAM
SF_TEAMSET_FIREONCE
SF_TRACKTRAIN_FORWARDONLY
SF_TRACKTRAIN_NOCONTROL
SF_TRACKTRAIN_NOPITCH
SF_TRACKTRAIN_PASSABLE
SF_TRACK_ACTIVATETRAIN
SF_TRACK_DONT_MOVE
SF_TRACK_RELINK
SF_TRACK_ROTMOVE
SF_TRACK_STARTBOTTOM
SF_TRAIN_PASSABLE
SF_TRAIN_START_ON
SF_TRAIN_WAIT_RETRIGGER
SF_TRIGGER_ALLOWMONSTERS
SF_TRIGGER_HURT_CLIENTONLYFIRE
SF_TRIGGER_HURT_CLIENTONLYTOUCH
SF_TRIGGER_HURT_NO_CLIENTS
SF_TRIGGER_HURT_START_OFF
SF_TRIGGER_HURT_TARGETONCE
SF_TRIGGER_NOCLIENTS
SF_TRIGGER_PUSHABLES
SF_TRIGGER_PUSH_START_OFF
SF_TRIG_PUSH_ONCE
SF_WALL_START_OFF
SF_WORLD_DARK
SF_WORLD_FORCETEAM
SF_WORLD_TITLE
SND_CHANGE_PITCH
SND_CHANGE_VOL
SND_SPAWNING
SND_STOP
SOLID_BBOX
SOLID_BSP
SOLID_NOT
SOLID_SLIDEBOX
SOLID_TRIGGER
SPAWNFLAG_DROIDONLY
SPAWNFLAG_NOMESSAGE
SPAWNFLAG_NOTOUCH
SPAWNFLAG_USEONLY
SPEAK_ALL
SPEAK_LISTENALL
SPEAK_MUTED
SPEAK_NORMAL
STAMINA_RESET
STAMINA_SET
STUNT_DIVE
STUNT_DUCK
STUNT_FLIP
STUNT_GETUP
STUNT_NONE
STUNT_ROLL
SVC_ADDANGLE
SVC_CDTRACK
SVC_CENTERPRINT
SVC_CHOKE
SVC_CLIENTDATA
SVC_CROSSHAIRANGLE
SVC_CUSTOMIZATION
SVC_CUTSCENE
SVC_DAMAGE
SVC_DECALNAME
SVC_DELTADESCRIPTION
SVC_DELTAPACKETENTITIES
SVC_DIRECTOR
SVC_DISCONNECT
SVC_EVENT
SVC_EVENT_RELIABLE
SVC_FILETXFERFAILED
SVC_FINALE
SVC_FOUNDSECRET
SVC_HLTV
SVC_INTERMISSION
SVC_KILLEDMONSTER
SVC_LIGHTSTYLE
SVC_NEWMOVEVARS
SVC_NEWUSERMSG
SVC_NOP
SVC_PACKETENTITIES
SVC_PARTICLE
SVC_PINGS
SVC_PRINT
SVC_RESOURCELIST
SVC_RESOURCEREQUEST
SVC_RESTORE
SVC_ROOMTYPE
SVC_SENDEXTRAINFO
SVC_SERVERINFO
SVC_SETANGLE
SVC_SETPAUSE
SVC_SETVIEW
SVC_SIGNONNUM
SVC_SOUND
SVC_SOUNDFADE
SVC_SPAWNBASELINE
SVC_SPAWNSTATIC
SVC_SPAWNSTATICSOUND
SVC_STOPSOUND
SVC_STUFFTEXT
SVC_TEMPENTITY
SVC_TIME
SVC_TIMESCALE
SVC_UPDATEUSERINFO
SVC_VERSION
SVC_VOICEDATA
SVC_VOICEINIT
SVC_WEAPONANIM
TEFIRE_FLAG_ALLFLOAT
TEFIRE_FLAG_ALPHA
TEFIRE_FLAG_LOOP
TEFIRE_FLAG_PLANAR
TEFIRE_FLAG_SOMEFLOAT
TE_ARMOR_RICOCHET
TE_BEAMCYLINDER
TE_BEAMDISK
TE_BEAMENTPOINT
TE_BEAMENTS
TE_BEAMFOLLOW
TE_BEAMPOINTS
TE_BEAMRING
TE_BEAMSPRITE
TE_BEAMTORUS
TE_BLOOD
TE_BLOODSPRITE
TE_BLOODSTREAM
TE_BOX
TE_BREAKMODEL
TE_BSPDECAL
TE_BUBBLES
TE_BUBBLETRAIL
TE_DECAL
TE_DECALHIGH
TE_DLIGHT
TE_ELIGHT
TE_EXPLFLAG_NOADDITIVE
TE_EXPLFLAG_NODLIGHTS
TE_EXPLFLAG_NONE
TE_EXPLFLAG_NOPARTICLES
TE_EXPLFLAG_NOSOUND
TE_EXPLODEMODEL
TE_EXPLOSION
TE_EXPLOSION2
TE_FIREFIELD
TE_FIZZ
TE_GLOWSPRITE
TE_GUNSHOT
TE_GUNSHOTDECAL
TE_IMPLOSION
TE_KILLBEAM
TE_KILLPLAYERATTACHMENTS
TE_LARGEFUNNEL
TE_LAVASPLASH
TE_LIGHTNING
TE_LINE
TE_MODEL
TE_MULTIGUNSHOT
TE_PARTICLEBURST
TE_PLAYERATTACHMENT
TE_PLAYERDECAL
TE_PLAYERSPRITES
TE_PROJECTILE
TE_SHOWLINE
TE_SMOKE
TE_SPARKS
TE_SPRAY
TE_SPRITE
TE_SPRITETRAIL
TE_SPRITE_SPRAY
TE_STREAK_SPLASH
TE_TAREXPLOSION
TE_TELEPORT
TE_TEXTMESSAGE
TE_TRACER
TE_USERTRACER
TE_WORLDDECAL
TE_WORLDDECALHIGH
TFCMAX_WEAPONS
TFC_AMMO_BULLETS
TFC_AMMO_CELLS
TFC_AMMO_NADE1
TFC_AMMO_NADE2
TFC_AMMO_ROCKETS
TFC_AMMO_SHELLS
TFC_GOALITEM_BLUE
TFC_GOALITEM_GREEN
TFC_GOALITEM_RED
TFC_GOALITEM_YELLOW
TFC_PC_CIVILIAN
TFC_PC_DEMOMAN
TFC_PC_ENGENEER
TFC_PC_ENGINEER
TFC_PC_HWGUY
TFC_PC_MEDIC
TFC_PC_PYRO
TFC_PC_SCOUT
TFC_PC_SNIPER
TFC_PC_SOLDIER
TFC_PC_SPY
TFC_WPN_AC
TFC_WPN_AUTORIFLE
TFC_WPN_AXE
TFC_WPN_CALTROP
TFC_WPN_CONCUSSIONGRENADE
TFC_WPN_EMPGRENADE
TFC_WPN_FLAMES
TFC_WPN_FLAMETHROWER
TFC_WPN_GASGRENADE
TFC_WPN_GL
TFC_WPN_IC
TFC_WPN_KNIFE
TFC_WPN_MEDIKIT
TFC_WPN_MIRVGRENADE
TFC_WPN_NAILGRENADE
TFC_WPN_NAPALMGRENADE
TFC_WPN_NG
TFC_WPN_NONE
TFC_WPN_NORMALGRENADE
TFC_WPN_PL
TFC_WPN_RAILGUN
TFC_WPN_RPG
TFC_WPN_SENTRYGUN
TFC_WPN_SHOTGUN
TFC_WPN_SNIPERRIFLE
TFC_WPN_SPANNER
TFC_WPN_SUPERNG
TFC_WPN_SUPERSHOTGUN
TFC_WPN_TIMER
TFC_WPN_TRANQ
TFC_WPN_UNK18
TFC_WPN_UNK19
TQUERY_CONNECT_FAILED
TQUERY_QUERY_FAILED
TQUERY_SUCCESS
TR_AllSolid
TR_EndPos
TR_flFraction
TR_flPlaneDist
TR_Fraction
TR_Hit
TR_Hitgroup
TR_iHitgroup
TR_InOpen
TR_InWater
TR_pHit
TR_PlaneDist
TR_PlaneNormal
TR_StartSolid
TR_vecEndPos
TR_vecPlaneNormal
TSA_FLASHLIGHT
TSA_LASERSIGHT
TSA_SCOPE
TSA_SILENCER
TSITEM_KUNGFU
TSITEM_SUPERJUMP
TSKF_DOUBLEKILL
TSKF_ISSPEC
TSKF_KILLEDSPEC
TSKF_SLIDINGKILL
TSKF_STUNTKILL
TSMAX_WEAPONS
TSMSG_DEAD
TSMSG_DEMOLITION
TSMSG_KILLER
TSMSG_NORMAL
TSMSG_SPECIALIST
TSMSG_THEONE
TSMSG_UNSTOPPABLE
TSMSG_WAITING
TSPWUP_ARMOR
TSPWUP_DFIRERATE
TSPWUP_GRENADE
TSPWUP_HEALTH
TSPWUP_INFAMMO
TSPWUP_KUNGFU
TSPWUP_NONE
TSPWUP_RANDOM
TSPWUP_SLOWMO
TSPWUP_SLOWPAUSE
TSPWUP_SUPERJUMP
TSW_57
TSW_A57
TSW_ABERETTAS
TSW_AK47
TSW_AMK23
TSW_AUG
TSW_AUZI
TSW_C4
TSW_CKNIFE
TSW_DEAGLE
TSW_GCOLTS
TSW_GLOCK18
TSW_GLOCK20
TSW_KATANA
TSW_KUNG_FU
TSW_M16A4
TSW_M3
TSW_M4A1
TSW_M60E3
TSW_M61GRENADE
TSW_M82A1
TSW_MK1
TSW_MK23
TSW_MOSSBERG
TSW_MP5K
TSW_MP5SD
TSW_MP7
TSW_RBULL
TSW_SAWED_OFF
TSW_SKNIFE
TSW_SPAS
TSW_TKNIFE
TSW_TMP
TSW_UMP
TSW_UNK1
TSW_USAS
TSW_UZI
UC_Buttons
UC_ForwardMove
UC_ImpactIndex
UC_ImpactPosition
UC_Impulse
UC_LerpMsec
UC_LightLevel
UC_Msec
UC_SideMove
UC_UpMove
UC_ViewAngles
UC_WeaponSelect
usercmd_buttons
usercmd_float_end
usercmd_float_start
usercmd_forwardmove
usercmd_impact_index
usercmd_impact_position
usercmd_impulse
usercmd_int_end
usercmd_int_start
usercmd_lerp_msec
usercmd_lightlevel
usercmd_msec
usercmd_sidemove
usercmd_upmove
usercmd_vec_end
usercmd_vec_start
usercmd_viewangles
usercmd_weaponselect
VOL_NORM
WALKMOVE_CHECKONLY
WALKMOVE_NORMAL
WALKMOVE_WORLDONLY
WEAPON_ACIDROCKET
WEAPON_BILEBOMB
WEAPON_BITE
WEAPON_BITE2
WEAPON_BLINK
WEAPON_CHARGE
WEAPON_CLAWS
WEAPON_DEVOUR
WEAPON_DIVINEWIND
WEAPON_GRENADE
WEAPON_GRENADE_GUN
WEAPON_HEALINGSPRAY
WEAPON_HMG
WEAPON_KNIFE
WEAPON_LEAP
WEAPON_LMG
WEAPON_MAX
WEAPON_METABOLIZE
WEAPON_MINE
WEAPON_NONE
WEAPON_PARASITE
WEAPON_PISTOL
WEAPON_PRIMALSCREAM
WEAPON_SHOTGUN
WEAPON_SPIKE
WEAPON_SPIT
WEAPON_SPORES
WEAPON_STOMP
WEAPON_SWIPE
WEAPON_UMBRA
WEAPON_WEBSPINNER
WEAPON_WELDER

plugin_init
plugin_pause
plugin_unpause
server_changelevel
plugin_cfg
plugin_end
plugin_log
plugin_precache
client_infochanged
client_connect
client_authorized
client_disconnect
client_command
client_putinserver
inconsistent_file
plugin_modules
plugin_natives
CS_InternalCommand
client_damage
client_death
grenade_throw
bomb_planting
bomb_planted
bomb_explode
bomb_defusing
bomb_defused
grenade_throw
rocket_shoot
controlpoints_init
client_damage
client_death
client_score
dod_client_changeteam
dod_client_changeclass
dod_client_spawn
dod_client_scope
dod_client_weaponpickup
dod_client_prone
dod_client_weaponswitch
dod_grenade_explosion
dod_rocket_explosion
dod_client_objectpickup
dod_client_stamina
pfn_touch
server_frame
client_kill
client_PreThink
client_PostThink
client_impulse
pfn_think
pfn_playbackevent
pfn_keyvalue
pfn_spawn
operator
operator
operator
client_changeclass
client_built
client_changeteam
client_spawn
round_start
round_end
map_reset
client_damage
client_death
Melee_Attack
client_stunt
client_powerup
client_damage
client_death
XMF_SCORE
XMF_DAMAGE
XMF_DEATH	















/* Message constants
*
* by the AMX Mod X Development Team
*
* This file is provided as is (no warranties).
*
*/
 
#if defined _message_const_included
	#endinput
#endif
#define _message_const_included

/* Destination types for message_begin() */
#define	MSG_BROADCAST               0        // Unreliable to all
#define	MSG_ONE                     1        // Reliable to one (msg_entity)
#define	MSG_ALL                     2        // Reliable to all
#define	MSG_INIT                    3        // Write to the init string
#define MSG_PVS                     4        // Ents in PVS of org
#define MSG_PAS                     5        // Ents in PAS of org
#define MSG_PVS_R                   6        // Reliable to PVS
#define MSG_PAS_R                   7        // Reliable to PAS
#define MSG_ONE_UNRELIABLE          8        // Send to one client, but don't put in reliable stream, put in unreliable datagram (could be dropped)
#define	MSG_SPEC                    9        // Sends to all spectator proxies

/* Message types for message_begin() */
#define SVC_TEMPENTITY              23
#define SVC_INTERMISSION            30
#define SVC_CDTRACK                 32
#define SVC_WEAPONANIM              35
#define SVC_ROOMTYPE                37
#define SVC_ADDANGLE                38       // [vec3] add this angle to the view angle
#define SVC_NEWUSERMSG              39
#define	SVC_HLTV                    50

/* Message flags for set_msg_block() */
#define BLOCK_NOT                   0
#define BLOCK_ONCE                  1
#define BLOCK_SET                   2

/* Used with get_msg_argtype() and set_msg_arg_ */
enum
{
	ARG_BYTE = 1,       /* int */
	ARG_CHAR,           /* int */
	ARG_SHORT,          /* int */
	ARG_LONG,           /* int */
	ARG_ANGLE,          /* float */
	ARG_COORD,          /* float */
	ARG_STRING,         /* string */
	ARG_ENTITY,         /* int */
}

/* Temp entity message types for message_begin() */
#define	TE_BEAMPOINTS               0        // Beam effect between two points
// write_byte(TE_BEAMPOINTS)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define	TE_BEAMENTPOINT             1        // Beam effect between point and entity
// write_byte(TE_BEAMENTPOINT)
// write_short(start entity) 
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define	TE_GUNSHOT                  2        // Particle effect plus ricochet sound
// write_byte(TE_GUNSHOT)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)

#define	TE_EXPLOSION                3        // Additive sprite, 2 dynamic lights, flickering particles, explosion sound, move vertically 8 pps
// write_byte(TE_EXPLOSION)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(sprite index)
// write_byte(scale in 0.1's)
// write_byte(framerate)
// write_byte(flags)
//
// The Explosion effect has some flags to control performance/aesthetic features:
#define TE_EXPLFLAG_NONE            0        // All flags clear makes default Half-Life explosion
#define TE_EXPLFLAG_NOADDITIVE      1        // Sprite will be drawn opaque (ensure that the sprite you send is a non-additive sprite)
#define TE_EXPLFLAG_NODLIGHTS       2        // Do not render dynamic lights
#define TE_EXPLFLAG_NOSOUND         4        // Do not play client explosion sound
#define TE_EXPLFLAG_NOPARTICLES     8        // Do not draw particles

#define	TE_TAREXPLOSION             4        // Quake1 "tarbaby" explosion with sound
// write_byte(TE_TAREXPLOSION)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)

#define	TE_SMOKE                    5        // Alphablend sprite, move vertically 30 pps
// write_byte(TE_SMOKE)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z) 
// write_short(sprite index)
// write_byte(scale in 0.1's)
// write_byte(framerate)

#define	TE_TRACER                   6        // Tracer effect from point to point
// write_byte(TE_TRACER)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)

#define	TE_LIGHTNING                7        // TE_BEAMPOINTS with simplified parameters
// write_byte(TE_LIGHTNING)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)
// write_byte(life in 0.1's) 
// write_byte(width in 0.1's) 
// write_byte(amplitude in 0.01's)
// write_short(sprite model index)

#define	TE_BEAMENTS                 8
// write_byte(TE_BEAMENTS)
// write_short(start entity) 
// write_short(end entity) 
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define	TE_SPARKS                   9        // 8 random tracers with gravity, ricochet sprite
// write_byte(TE_SPARKS)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z) 

#define	TE_LAVASPLASH               10       // Quake1 lava splash
// write_byte(TE_LAVASPLASH)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)

#define	TE_TELEPORT                 11       // Quake1 teleport splash
// write_byte(TE_TELEPORT)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)

#define TE_EXPLOSION2               12       // Quake1 colormaped (base palette) particle explosion with sound
// write_byte(TE_EXPLOSION2)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(starting color)
// write_byte(num colors)

#define TE_BSPDECAL                 13       // Decal from the .BSP file
// write_byte(TE_BSPDECAL)
// write_coord(position.x) decal position (center of texture in world)
// write_coord(position.y)
// write_coord(position.z)
// write_short(texture index of precached decal texture name)
// write_short(entity index)
// [optional - write_short(index of model of above entity) only included if previous short is non-zero (not the world)]

#define TE_IMPLOSION                14       // Tracers moving toward a point
// write_byte(TE_IMPLOSION)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(radius)
// write_byte(count)
// write_byte(life in 0.1's) 

#define TE_SPRITETRAIL              15       // Line of moving glow sprites with gravity, fadeout, and collisions
// write_byte(TE_SPRITETRAIL)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)
// write_short(sprite index)
// write_byte(count)
// write_byte(life in 0.1's) 
// write_byte(scale in 0.1's) 
// write_byte(velocity along vector in 10's)
// write_byte(randomness of velocity in 10's)

#define TE_SPRITE                   17       // Additive sprite, plays 1 cycle
// write_byte(TE_SPRITE)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(sprite index) 
// write_byte(scale in 0.1's) 
// write_byte(brightness)

#define TE_BEAMSPRITE               18       // A beam with a sprite at the end
// write_byte(TE_BEAMSPRITE)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z) 
// write_short(beam sprite index) 
// write_short(end sprite index) 

#define TE_BEAMTORUS                19       // Screen aligned beam ring, expands to max radius over lifetime
// write_byte(TE_BEAMTORUS)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(axis.x)
// write_coord(axis.y)
// write_coord(axis.z) 
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define TE_BEAMDISK                 20       // Disk that expands to max radius over lifetime
// write_byte(TE_BEAMDISK)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(axis.x)
// write_coord(axis.y)
// write_coord(axis.z) 
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define TE_BEAMCYLINDER             21       // Cylinder that expands to max radius over lifetime
// write_byte(TE_BEAMCYLINDER)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(axis.x)
// write_coord(axis.y)
// write_coord(axis.z) 
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define TE_BEAMFOLLOW               22       // Create a line of decaying beam segments until entity stops moving
// write_byte(TE_BEAMFOLLOW)
// write_short(entity:attachment to follow)
// write_short(sprite index)
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)

#define TE_GLOWSPRITE               23
// write_byte(TE_GLOWSPRITE)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(model index)
// write_byte(scale / 10)
// write_byte(size)
// write_byte(brightness)

#define TE_BEAMRING                 24       // Connect a beam ring to two entities
// write_byte(TE_BEAMRING)
// write_short(start entity) 
// write_short(end entity) 
// write_short(sprite index) 
// write_byte(starting frame) 
// write_byte(frame rate in 0.1's) 
// write_byte(life in 0.1's) 
// write_byte(line width in 0.1's) 
// write_byte(noise amplitude in 0.01's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(brightness)
// write_byte(scroll speed in 0.1's)

#define TE_STREAK_SPLASH            25       // Oriented shower of tracers
// write_byte(TE_STREAK_SPLASH)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(vector.x)
// write_coord(vector.y)
// write_coord(vector.z) 
// write_byte(color)
// write_short(count)
// write_short(base speed)
// write_short(ramdon velocity)

#define TE_DLIGHT                   27       // Dynamic light, effect world, minor entity effect
// write_byte(TE_DLIGHT)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(radius in 10's) 
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(life in 10's)
// write_byte(decay rate in 10's)

#define TE_ELIGHT                   28       // Point entity light, no world effect
// write_byte(TE_ELIGHT)
// write_short(entity:attachment to follow)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(radius)
// write_byte(red)
// write_byte(green)
// write_byte(blue)
// write_byte(life in 0.1's)
// write_coord(decay rate)

#define TE_TEXTMESSAGE              29
// write_byte(TE_TEXTMESSAGE)
// write_byte(channel)
// write_short(x) -1 = center)
// write_short(y) -1 = center)
// write_byte(effect) 0 = fade in/fade out, 1 is flickery credits, 2 is write out (training room)
// write_byte(red) - text color
// write_byte(green)
// write_byte(blue)
// write_byte(alpha)
// write_byte(red) - effect color
// write_byte(green)
// write_byte(blue)
// write_byte(alpha)
// write_short(fadein time)
// write_short(fadeout time)
// write_short(hold time)
// [optional] write_short(fxtime) time the highlight lags behing the leading text in effect 2
// write_string(text message) 512 chars max string size

#define TE_LINE                     30
// write_byte(TE_LINE)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)
// write_short(life in 0.1 s)
// write_byte(red)
// write_byte(green)
// write_byte(blue)

#define TE_BOX                      31
// write_byte(TE_BOX)
// write_coord(boxmins.x)
// write_coord(boxmins.y)
// write_coord(boxmins.z)
// write_coord(boxmaxs.x)
// write_coord(boxmaxs.y)
// write_coord(boxmaxs.z)
// write_short(life in 0.1 s)
// write_byte(red)
// write_byte(green)
// write_byte(blue)

#define TE_KILLBEAM                 99       // Kill all beams attached to entity
// write_byte(TE_KILLBEAM)
// write_short(entity)

#define TE_LARGEFUNNEL              100
// write_byte(TE_LARGEFUNNEL)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(sprite index) 
// write_short(flags) 

#define	TE_BLOODSTREAM              101      // Particle spray
// write_byte(TE_BLOODSTREAM)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(vector.x)
// write_coord(vector.y)
// write_coord(vector.z)
// write_byte(color)
// write_byte(speed)

#define	TE_SHOWLINE                 102      // Line of particles every 5 units, dies in 30 seconds
// write_byte(TE_SHOWLINE)
// write_coord(startposition.x)
// write_coord(startposition.y)
// write_coord(startposition.z)
// write_coord(endposition.x)
// write_coord(endposition.y)
// write_coord(endposition.z)

#define TE_BLOOD                    103      // Particle spray
// write_byte(TE_BLOOD)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(vector.x)
// write_coord(vector.y)
// write_coord(vector.z)
// write_byte(color)
// write_byte(speed)

#define TE_DECAL                    104      // Decal applied to a brush entity (not the world)
// write_byte(TE_DECAL)
// write_coord(position.x) decal position (center of texture in world)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(texture index of precached decal texture name)
// write_short(entity index)

#define TE_FIZZ                     105      // Create alpha sprites inside of entity, float upwards
// write_byte(TE_FIZZ)
// write_short(entity)
// write_short(sprite index)
// write_byte density)

#define TE_MODEL                    106      // Create a moving model that bounces and makes a sound when it hits
// write_byte(TE_MODEL)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(velocity.x)
// write_coord(velocity.y)
// write_coord(velocity.z)
// write_angle(initial yaw)
// write_short(model index)
// write_byte(bounce sound type)
// write_byte(life in 0.1's)

#define TE_EXPLODEMODEL             107      // Spherical shower of models, picks from set
// write_byte(TE_EXPLODEMODEL)
// write_coord(origin.x)
// write_coord(origin.y)
// write_coord(origin.z)
// write_coord(velocity.x)
// write_coord(velocity.y)
// write_coord(velocity.z)
// write_short(model index)
// write_short(count)
// write_byte(life in 0.1's)

#define TE_BREAKMODEL               108      // Box of models or sprites
// write_byte(TE_BREAKMODEL)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(size.x)
// write_coord(size.y)
// write_coord(size.z)
// write_coord(velocity.x)
// write_coord(velocity.y)
// write_coord(velocity.z)
// write_byte(random velocity in 10's)
// write_short(sprite or model index)
// write_byte(count)
// write_byte(life in 0.1 secs)
// write_byte(flags)

#define TE_GUNSHOTDECAL             109      // Decal and ricochet sound
// write_byte(TE_GUNSHOTDECAL)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(entity index???)
// write_byte(decal???)

#define TE_SPRITE_SPRAY             110      // Spray of alpha sprites
// write_byte(TE_SPRITE_SPRAY)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(velocity.x)
// write_coord(velocity.y)
// write_coord(velocity.z)
// write_short(sprite index)
// write_byte(count)
// write_byte(speed)
// write_byte(noise)

#define TE_ARMOR_RICOCHET           111      // Quick spark sprite, client ricochet sound.
// write_byte(TE_ARMOR_RICOCHET)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(scale in 0.1's)

#define TE_PLAYERDECAL              112
// write_byte(TE_PLAYERDECAL)
// write_byte(playerindex)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(entity???)
// write_byte(decal number)
// [optional] write_short(model index)

#define TE_BUBBLES                  113      // Create alpha sprites inside of box, float upwards
// write_byte(TE_BUBBLES)
// write_coord(position.x) (min start position)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(position.x) (max start position)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(float height)
// write_short(model index)
// write_byte(count)
// write_coord(speed)

#define TE_BUBBLETRAIL              114      // Create alpha sprites along a line, float upwards
// write_byte(TE_BUBBLETRAIL)
// write_coord(position.x) (min start position)
// write_coord(position.y) (min start position)
// write_coord(position.z) (min start position)
// write_coord(position.x) (max start position)
// write_coord(position.y) (max start position)
// write_coord(position.z) (max start position)
// write_coord(float height)
// write_short(model index)
// write_byte(count)
// write_coord(speed)

#define TE_BLOODSPRITE              115      // Spray of opaque sprite1's that fall, single sprite2 for 1..2 secs (this is a high-priority tent)
// write_byte(TE_BLOODSPRITE)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_short(sprite1 index)
// write_short(sprite2 index)
// write_byte(color)
// write_byte(scale)

#define TE_WORLDDECAL               116      // Decal applied to the world brush
// write_byte(TE_WORLDDECAL)
// write_coord(position.x) decal position (center of texture in world)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(texture index of precached decal texture name)

#define TE_WORLDDECALHIGH           117      // Decal (with texture index > 256) applied to world brush
// write_byte(TE_WORLDDECALHIGH)
// write_coord(position.x) decal position (center of texture in world)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(texture index of precached decal texture name - 256)

#define TE_DECALHIGH                118      // Same as TE_DECAL, but the texture index was greater than 256
// write_byte(TE_DECALHIGH)
// write_coord(position.x) decal position (center of texture in world)
// write_coord(position.y)
// write_coord(position.z)
// write_byte(texture index of precached decal texture name - 256)
// write_short(entity index)

#define TE_PROJECTILE               119      // Makes a projectile (like a nail) (this is a high-priority tent)
// write_byte(TE_PROJECTILE)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(velocity.x)
// write_coord(velocity.y)
// write_coord(velocity.z)
// write_short(modelindex)
// write_byte(life)
// write_byte(owner)  projectile won't collide with owner (if owner == 0, projectile will hit any client).

#define TE_SPRAY                    120      // Throws a shower of sprites or models
// write_byte(TE_SPRAY)
// write_coord(position.x)
// write_coord(position.y)
// write_coord(position.z)
// write_coord(direction.x)
// write_coord(direction.y)
// write_coord(direction.z)
// write_short(modelindex)
// write_byte(count)
// write_byte(speed)
// write_byte(noise)
// write_byte(rendermode)

#define TE_PLAYERSPRITES            121      // Sprites emit from a player's bounding box (ONLY use for players!)
// write_byte(TE_PLAYERSPRITES)
// write_short(playernum)
// write_short(sprite modelindex)
// write_byte(count)
// write_byte(variance) (0 = no variance in size) (10 = 10% variance in size)

#define TE_PARTICLEBURST            122      // Very similar to lavasplash
// write_byte(TE_PARTICLEBURST)
// write_coord(origin)
// write_short(radius)
// write_byte(particle color)
// write_byte(duration * 10) (will be randomized a bit)

#define TE_FIREFIELD                123      // Makes a field of fire
// write_byte(TE_FIREFIELD)
// write_coord(origin)
// write_short(radius) (fire is made in a square around origin. -radius, -radius to radius, radius)
// write_short(modelindex)
// write_byte(count)
// write_byte(flags)
// write_byte(duration (in seconds) * 10) (will be randomized a bit)
//
// to keep network traffic low, this message has associated flags that fit into a byte:
#define TEFIRE_FLAG_ALLFLOAT        1        // All sprites will drift upwards as they animate
#define TEFIRE_FLAG_SOMEFLOAT       2        // Some of the sprites will drift upwards. (50% chance)
#define TEFIRE_FLAG_LOOP            4        // If set, sprite plays at 15 fps, otherwise plays at whatever rate stretches the animation over the sprite's duration.
#define TEFIRE_FLAG_ALPHA           8        // If set, sprite is rendered alpha blended at 50% else, opaque
#define TEFIRE_FLAG_PLANAR          16       // If set, all fire sprites have same initial Z instead of randomly filling a cube. 

#define TE_PLAYERATTACHMENT         124      // Attaches a TENT to a player (this is a high-priority tent)
// write_byte(TE_PLAYERATTACHMENT)
// write_byte(entity index of player)
// write_coord(vertical offset) (attachment origin.z = player origin.z + vertical offset)
// write_short(model index)
// write_short(life * 10 )

#define TE_KILLPLAYERATTACHMENTS    125      // Will expire all TENTS attached to a player.
// write_byte(TE_KILLPLAYERATTACHMENTS)
// write_byte(entity index of player)

#define TE_MULTIGUNSHOT             126      // Much more compact shotgun message
// This message is used to make a client approximate a 'spray' of gunfire.
// Any weapon that fires more than one bullet per frame and fires in a bit of a spread is
// a good candidate for MULTIGUNSHOT use. (shotguns)
//
// NOTE: This effect makes the client do traces for each bullet, these client traces ignore
//		 entities that have studio models.Traces are 4096 long.
//
// write_byte(TE_MULTIGUNSHOT)
// write_coord(origin.x)
// write_coord(origin.y)
// write_coord(origin.z)
// write_coord(direction.x)
// write_coord(direction.y)
// write_coord(direction.z)
// write_coord(x noise * 100)
// write_coord(y noise * 100)
// write_byte(count)
// write_byte(bullethole decal texture index)

#define TE_USERTRACER               127      // Larger message than the standard tracer, but allows some customization.
// write_byte(TE_USERTRACER)
// write_coord(origin.x)
// write_coord(origin.y)
// write_coord(origin.z)
// write_coord(velocity.x)
// write_coord(velocity.y)
// write_coord(velocity.z)
// write_byte(life * 10)
// write_byte(color) this is an index into an array of color vectors in the engine. (0 - )
// write_byte(length * 10)
